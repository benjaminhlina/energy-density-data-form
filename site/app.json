[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n{\n  # library(dplyr)\n  library(DT) \n  # library(here)\n  # library(readr)\n  # library(openxlsx)\n  library(shiny)\n}\n\n# Define column names\n# column_names <- read_csv(here(\"data-raw\",\n#                               \"column_names_tbl_sample.csv\"))\n# \n# \n# dput(column_names$columns)\n\ncolumn_names <- data.frame(columns = c(\"project_id\", \n                                       \"date\", \"month\", \"year\", \n                                       \"scientific_name\", \"wild_lab\", \n                                       \"lifestage\", \"age\", \"sex\", \n                                       \"fork_length\", \"total_length\", \"weight\", \n                                       \"composite\", \"composite_n\", \n                                       \"tissue_type\", \"sample_procedure\", \n                                       \"waterbody\", \"area\", \"site\", \n                                       \"site_depth\", \"latitude (dd.ddddd)\", \n                                       \"longitude (ddd.ddddd)\", \n                                       \"calorimetry_method\")\n)\n# fw_fish_genus_sp <- read_csv(here(\"data-raw\",\n#                                   \"fw_fish_genus_sepcies.csv\"))\n\n# ---- shiny appp ----- \nui <- fluidPage(\n  titlePanel(\"Energy Density Data Form\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"project_id\", \"Project Name\"),\n      dateInput(\"date\", \"Date (YYYY-MM-DD)\", value = Sys.Date(), \n                format = \"yyyy-mm-dd\"),\n      selectizeInput(\"scientific_name\", \"Scientific Name\", \n                     choices = NULL,\n                     selected = NULL,\n                     options = list(\n                       create = FALSE,\n                       placeholder = 'Start typing a Genus and speices ...'\n                     )),\n      selectInput(\"wild_lab\", \"Wild or Lab\",\n                  choices = c(\"wild\", \"lab\"), selected = NULL),\n      selectInput(\"lifestage\", \"Lifestage\",\n                  choices = c(\"fry\", \"larva\", \"juvenile\", \"adult\"), \n                  selected = NULL),\n      numericInput(\"age\", \"Age\", value = NA, min = 0),\n      selectInput(\"sex\", \"Sex\",\n                  choices = c(\"female\", \"male\", \"unknown\"), selected = NULL),\n      numericInput(\"fork_length\", \"Fork Length (mm)\", value = NA, min = 0),\n      numericInput(\"total_length\", \"Total Length (mm)\", value = NA, min = 0),\n      numericInput(\"weight\", \"Weight (g)\", value = NA, min = 0),\n      selectInput(\"composite\", \"Composite\", choices = c(\"individual\",\n                                                        \"composite\"\n      ), \n      selected = NULL),\n      numericInput(\"composite_n\", \"Composite n\", value = NA, min = 0),\n      selectInput(\"tissue_type\", \"Tissue Type\",\n                  choices = c(\"muscle\", \"liver\", \n                              \"stomach\", \"scales\", \"whole body\"), \n                  selected = NULL),\n      selectInput(\"sample_procedure\", \"Sample Procedure\", \n                  choices = c(\"ground\", \"dried\", \"wet\"), \n                  selected = NULL),\n      textInput(\"waterbody\", \"Waterbody\"),\n      textInput(\"area\", \"Area\"),\n      textInput(\"site\", \"Site\"),\n      numericInput(\"site_depth\", \"Site Depth\", value = NA, min = 0),\n      numericInput(\"latitude\", \"Latitude (dd.ddddd)\", value = NA, min = 15, \n                   max = 85),\n      numericInput(\"longitude\", \"Longitude (ddd.ddddd)\", value = NA, \n                   min = -170, max = -50),\n      textInput(\"calorimetry_method\", \"Calorimetry Method\"),\n      \n      \n      actionButton(\"add_row\", \"Add Row\"),\n      downloadButton(\"download\", \"Download Excel\")\n    ),\n    \n    mainPanel(\n      DTOutput(\"table\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  # ---- limit sci name entry ---- \n  observe({\n    updateSelectizeInput(session, \"scientific_name\",\n                         choices = c(\"\", \"test\"),\n                         selected = NULL, \n                         server = TRUE,)\n  })\n  # Empty data frame with predefined columns\n  df <- reactiveVal(\n    setNames(data.frame(matrix(ncol = length(column_names$columns), \n                               nrow = 0)), \n             column_names$columns)\n  )\n  \n  observeEvent(input$add_row, {\n    # valdiate prj id \n    if (is.null(input$project_id) || input$project_id == \"\") {\n      showNotification(\"Project ID is missing and needs to be a character \n                       string.\", \n                       type = \"error\")\n      return()\n    }\n    \n    \n    \n    \n    \n    # Validate lat/lon\n    if (is.na(input$latitude) || input$latitude < 15 || input$latitude > 85) {\n      showNotification(\"Latitude must be between 15 and 85 (North America).\", \n                       type = \"error\")\n      return()\n    }\n    if (is.na(input$longitude) || input$longitude < -170 || input$longitude > -50) {\n      showNotification(\"Longitude must be between -170 and -50 (North America).\", \n                       type = \"error\")\n      return()\n    }\n    \n    \n    new_row <- data.frame(\n      project_id = input$project_id,\n      date = input$date,\n      scientific_name = input$scientific_name,\n      wild_lab = input$wild_lab,\n      lifestage = input$lifestage,\n      age = input$age,\n      sex = input$sex,\n      fork_length = input$fork_length,\n      total_length = input$total_length,\n      weight = input$weight,\n      composite = input$composite,\n      composite_n = input$composite_n,\n      tissue_type = input$tissue_type,\n      sample_procedure = input$sample_procedure,\n      waterbody = input$waterbody,\n      area = input$area,\n      site = input$site,\n      site_depth = input$site_depth,\n      `latitude (dd.ddddd)` = input$latitude,\n      `longitude (ddd.ddddd)` = input$longitude,\n      calorimetry_method = input$calorimetry_method,\n      stringsAsFactors = FALSE\n    )\n    \n    df(rbind(df(), new_row))\n  })\n  \n  output$table <- renderDT({\n    datatable(df(), options = list(pageLength = 5))\n  })\n  \n  output$download <- downloadHandler(\n    filename = function() {\n      df_current <- df()\n      paste(\"energy_density_tbl_samples_\", \n            unique(df_current$project_id),\n            \"_\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.csv(df(), file, rowNames = TRUE)\n    }\n  )\n}\n\nshinyApp(ui, server)\n","type":"text"},{"name":"DESCRIPTION","content":"Title: Energy Density Data Entry Form\nAuthor: Benjamin L. Hlina\nAuthorUrl: http://www.benjamhlina.com\nDisplayMode: Showcase\nTags: data-entry\nType: Shiny\n","type":"text"},{"name":"Readme.md","content":"This is an data entry application that allows simple data entry into entry. \n\n","type":"text"}]
